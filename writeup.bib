
@online{noauthor_using_nodate,
	title = {Using {BibTeX}: a short guide},
	url = {https://www.economics.utoronto.ca/osborne/latex/BIBTEX.HTM},
	urldate = {2022-04-27},
	file = {Using BibTeX\: a short guide:C\:\\Users\\samue\\Zotero\\storage\\CY7E77MQ\\BIBTEX.html:text/html},
}

@online{unknown_bubble_2014,
	title = {Bubble Sort},
	url = {https://www.geeksforgeeks.org/bubble-sort/},
	abstract = {A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.},
	titleaddon = {{GeeksforGeeks}},
	author = {{Unknown}},
	urldate = {2022-04-27},
	date = {2014-02-02},
	langid = {english},
	file = {Snapshot:C\:\\Users\\samue\\Zotero\\storage\\VVKI3D89\\2014 - Bubble Sort.html:text/html},
}

@misc{noauthor_notitle_nodate,
	file = {20120822_nato_treaty_en_light_2009.pdf:C\:\\Users\\samue\\Zotero\\storage\\P57B2K2D\\20120822_nato_treaty_en_light_2009.pdf:application/pdf},
}

@online{unknown_quicksort_2014,
	title = {{QuickSort}},
	url = {https://www.geeksforgeeks.org/quick-sort/},
	abstract = {A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.},
	titleaddon = {{GeeksforGeeks}},
	author = {{Unknown}},
	urldate = {2022-04-27},
	date = {2014-01-07},
	langid = {english},
	note = {Section: Divide and Conquer},
	file = {Snapshot:C\:\\Users\\samue\\Zotero\\storage\\Q4N7LWU4\\quick-sort.html:text/html},
}

@inreference{noauthor_quicksort_2022,
	title = {Quicksort},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=Quicksort&oldid=1080346337},
	abstract = {Quicksort is an in-place sorting algorithm. Developed by British computer scientist Tony Hoare in 1959 and published in 1961, it is still a commonly used algorithm for sorting. When implemented well, it can be somewhat faster than merge sort and about two or three times faster than heapsort.Quicksort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. For this reason, it is sometimes called partition-exchange sort. The sub-arrays are then sorted recursively. This can be done in-place, requiring small additional amounts of memory to perform the sorting.
Quicksort is a comparison sort, meaning that it can sort items of any type for which a "less-than" relation (formally, a total order) is defined. Efficient implementations of Quicksort are not a stable sort, meaning that the relative order of equal sort items is not preserved.
Mathematical analysis of quicksort shows that, on average, the algorithm takes 
  
    
      
        O
        (
        n
        log
        ⁡
        
          n
        
        )
      
    
    \{{\textbackslash}displaystyle O(n{\textbackslash}log \{n\})\}
   comparisons to sort n items. In the worst case, it makes 
  
    
      
        O
        (
        
          n
          
            2
          
        
        )
      
    
    \{{\textbackslash}displaystyle O(n{\textasciicircum}\{2\})\}
   comparisons.},
	booktitle = {Wikipedia},
	urldate = {2022-04-27},
	date = {2022-03-31},
	langid = {british},
	note = {Page Version {ID}: 1080346337},
	file = {Snapshot:C\:\\Users\\samue\\Zotero\\storage\\LYB3XRDH\\Quicksort.html:text/html},
}

@online{dorantes_quicksort_2022,
	title = {Quicksort Algorithm},
	url = {https://medium.com/cesars-tech-insights/quicksort-17c5d24e7e5f},
	abstract = {Get ready for your tech interview},
	titleaddon = {Cesar’s Tech Insights},
	author = {Dorantes, César Antón},
	urldate = {2022-04-27},
	date = {2022-03-29},
	langid = {english},
	file = {Snapshot:C\:\\Users\\samue\\Zotero\\storage\\WUBZETVG\\quicksort-17c5d24e7e5f.html:text/html},
}

@inreference{noauthor_bubble_2022,
	title = {Bubble sort},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=Bubble_sort&oldid=1084514264},
	abstract = {Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements "bubble" to the top of the list. 
This simple algorithm performs poorly in real world use and is used primarily as an educational tool. More efficient algorithms such as quicksort, timsort, or merge sort are used by the sorting libraries built into popular programming languages such as Python and Java.},
	booktitle = {Wikipedia},
	urldate = {2022-04-27},
	date = {2022-04-24},
	langid = {british},
	note = {Page Version {ID}: 1084514264},
}

@inreference{noauthor_linear_2022,
	title = {Linear search},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=Linear_search&oldid=1071025653},
	abstract = {In computer science, a linear search or sequential search is a method for finding an element within a list. It sequentially checks each element of the list until a match is found or the whole list has been searched.A linear search runs in at worst linear time and makes at most n comparisons, where n is the length of the list. If each element is equally likely to be searched, then linear search has an average case of n+1/2 comparisons, but the average case can be affected if the search probabilities for each element vary. Linear search is rarely practical because other search algorithms and schemes, such as the binary search algorithm and hash tables, allow significantly faster searching for all but short lists.},
	booktitle = {Wikipedia},
	urldate = {2022-04-27},
	date = {2022-02-10},
	langid = {british},
	note = {Page Version {ID}: 1071025653},
	file = {Snapshot:C\:\\Users\\samue\\Zotero\\storage\\G6AWZR7A\\2022 - Linear search.html:text/html},
}